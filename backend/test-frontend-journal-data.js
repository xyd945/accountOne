require('dotenv').config();\n\nconst { createClient } = require('@supabase/supabase-js');\n\nconst supabase = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_ROLE_KEY\n);\n\nconst TEST_USER_ID = '53f5afe6-cb6a-4436-8a3a-45e57a6db798';\n\nasync function testFrontendJournalData() {\n  console.log('🎨 Testing Frontend Journal Data Structure');\n  console.log('='.repeat(60));\n  \n  try {\n    // Fetch journal entries with the same query as frontend\n    const { data: entries, error } = await supabase\n      .from('journal_entries')\n      .select(`\n        *,\n        transaction_date,\n        usd_value,\n        usd_rate,\n        usd_source,\n        usd_timestamp,\n        transactions(user_id, txid, description)\n      `)\n      .eq('user_id', TEST_USER_ID)\n      .order('entry_date', { ascending: false })\n      .order('created_at', { ascending: false })\n      .limit(5);\n\n    if (error) {\n      console.error('❌ Database error:', error);\n      return;\n    }\n\n    console.log(`✅ Found ${entries.length} journal entries`);\n    console.log('\\n📋 Frontend Data Structure Test:');\n    console.log('─'.repeat(50));\n\n    entries.forEach((entry, index) => {\n      console.log(`\\n**Entry ${index + 1}:**`);\n      \n      // Test the data structure that frontend expects\n      const frontendData = {\n        // Top section: Amount and Date\n        topAmount: `${entry.amount?.toFixed(2)} ${entry.currency}`,\n        topDate: entry.transaction_date || entry.entry_date,\n        \n        // Middle section: Debit/Credit with amounts\n        debitAccount: entry.account_debit,\n        debitAmount: `${entry.amount?.toFixed(2)} ${entry.currency}`,\n        creditAccount: entry.account_credit,\n        creditAmount: `${entry.amount?.toFixed(2)} ${entry.currency}`,\n        \n        // Bottom section: Narrative, badges, and USD\n        narrative: entry.narrative,\n        aiConfidence: entry.ai_confidence ? `${Math.round(entry.ai_confidence * 100)}%` : null,\n        needsReview: !entry.is_reviewed,\n        totalAmount: `${entry.amount?.toFixed(2)} ${entry.currency}`,\n        usdValue: entry.usd_value ? `$${entry.usd_value.toFixed(2)} USD` : null\n      };\n      \n      console.log('  📱 UI Layout:');\n      console.log(`     Top: \"${frontendData.topAmount}\" | \"${frontendData.topDate}\"`);\n      console.log(`     Debit: \"${frontendData.debitAccount}\" - \"${frontendData.debitAmount}\"`);\n      console.log(`     Credit: \"${frontendData.creditAccount}\" - \"${frontendData.creditAmount}\"`);\n      if (frontendData.narrative) {\n        console.log(`     Narrative: \"${frontendData.narrative}\"`);\n      }\n      console.log(`     Badges: AI ${frontendData.aiConfidence || 'N/A'} | Review: ${frontendData.needsReview ? 'Yes' : 'No'}`);\n      console.log(`     Bottom: \"${frontendData.totalAmount}\" ${frontendData.usdValue ? `+ \"${frontendData.usdValue}\"` : '(no USD)'}`);\n      \n      // Check for data completeness\n      const hasAllFields = {\n        amount: !!entry.amount,\n        currency: !!entry.currency,\n        date: !!(entry.transaction_date || entry.entry_date),\n        debitAccount: !!entry.account_debit,\n        creditAccount: !!entry.account_credit,\n        narrative: !!entry.narrative,\n        usdValue: !!entry.usd_value\n      };\n      \n      console.log('  ✅ Data Completeness:');\n      Object.entries(hasAllFields).forEach(([field, hasValue]) => {\n        const status = hasValue ? '✅' : '❌';\n        console.log(`     ${status} ${field}: ${hasValue ? 'Present' : 'Missing'}`);\n      });\n    });\n    \n    console.log('\\n🎯 Frontend Integration Summary:');\n    console.log('─'.repeat(50));\n    console.log('✅ Amount formatting: .toFixed(2)');\n    console.log('✅ Date fallback: transaction_date || entry_date');\n    console.log('✅ USD value formatting: $X.XX USD');\n    console.log('✅ AI confidence: Math.round(confidence * 100)%');\n    console.log('✅ Review status: !is_reviewed');
    \n  } catch (error) {\n    console.error('❌ Test failed:', error);\n  }\n}\n\ntestFrontendJournalData().catch(console.error); 
    \n  } catch (error) {\n    console.error('❌ Test failed:', error);\n  }\n}\n\ntestFrontendJournalData().catch(console.error); 